//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/BonesOfDragonfall/Scripts/Input/NewInputSystem/GameInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BonesOfDragonfall
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/BonesOfDragonfall/Scripts/Input/NewInputSystem/GameInputSystem.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @GameInputSystem: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @GameInputSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerInputMap"",
            ""id"": ""cc97c774-7762-4c43-a946-af22c6f8259e"",
            ""actions"": [
                {
                    ""name"": ""PlayerRotationCameraMouse"",
                    ""type"": ""Value"",
                    ""id"": ""bf45f039-0db5-4292-9071-0273bb3cbb22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerMovementKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""ce4a6d51-359b-41dc-80f8-732e83dac209"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerJumpKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""d8577c6f-1b18-4c17-88d2-e4911422cde2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSprintingKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""f70aaba4-584c-4d46-9dd8-a1c7b641c008"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerCrouchKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""e0f1938a-96e1-44e7-bf1e-4f295d2e51c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0864427-04d0-44fd-9d34-cffea7b4a8b6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotationCameraMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7eacd220-fdc1-4aa0-8be1-4262923cf009"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b8d5c4a-4972-4825-800d-fa5ba548c15b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""61082ca9-1ca5-4536-a047-89babce879fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c55c5324-5b3b-4f72-aa20-ab46d2c0e53a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7dbe8dca-f609-46f7-9d9e-4a1ba3f684c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d8ab6232-fe07-4de5-aea2-052efca653d0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerJumpKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f157c729-2a74-4f2b-80d3-d969b371c4ed"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSprintingKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00a1e887-e503-43d6-941c-cdcb2983414a"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerCrouchKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInventoryMap"",
            ""id"": ""ff90f855-bc4d-42b0-b31d-159a6fd76c37"",
            ""actions"": [
                {
                    ""name"": ""PlayerOpenInventoryKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""b336ae09-b330-497c-b645-7cb19b4f1587"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db4d7cab-ae6c-4f67-9ea2-a85105729a22"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOpenInventoryKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerInputMap
            m_PlayerInputMap = asset.FindActionMap("PlayerInputMap", throwIfNotFound: true);
            m_PlayerInputMap_PlayerRotationCameraMouse = m_PlayerInputMap.FindAction("PlayerRotationCameraMouse", throwIfNotFound: true);
            m_PlayerInputMap_PlayerMovementKeyboard = m_PlayerInputMap.FindAction("PlayerMovementKeyboard", throwIfNotFound: true);
            m_PlayerInputMap_PlayerJumpKeyboard = m_PlayerInputMap.FindAction("PlayerJumpKeyboard", throwIfNotFound: true);
            m_PlayerInputMap_PlayerSprintingKeyboard = m_PlayerInputMap.FindAction("PlayerSprintingKeyboard", throwIfNotFound: true);
            m_PlayerInputMap_PlayerCrouchKeyboard = m_PlayerInputMap.FindAction("PlayerCrouchKeyboard", throwIfNotFound: true);
            // PlayerInventoryMap
            m_PlayerInventoryMap = asset.FindActionMap("PlayerInventoryMap", throwIfNotFound: true);
            m_PlayerInventoryMap_PlayerOpenInventoryKeyboard = m_PlayerInventoryMap.FindAction("PlayerOpenInventoryKeyboard", throwIfNotFound: true);
        }

        ~@GameInputSystem()
        {
            UnityEngine.Debug.Assert(!m_PlayerInputMap.enabled, "This will cause a leak and performance issues, GameInputSystem.PlayerInputMap.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_PlayerInventoryMap.enabled, "This will cause a leak and performance issues, GameInputSystem.PlayerInventoryMap.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerInputMap
        private readonly InputActionMap m_PlayerInputMap;
        private List<IPlayerInputMapActions> m_PlayerInputMapActionsCallbackInterfaces = new List<IPlayerInputMapActions>();
        private readonly InputAction m_PlayerInputMap_PlayerRotationCameraMouse;
        private readonly InputAction m_PlayerInputMap_PlayerMovementKeyboard;
        private readonly InputAction m_PlayerInputMap_PlayerJumpKeyboard;
        private readonly InputAction m_PlayerInputMap_PlayerSprintingKeyboard;
        private readonly InputAction m_PlayerInputMap_PlayerCrouchKeyboard;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerInputMap".
        /// </summary>
        public struct PlayerInputMapActions
        {
            private @GameInputSystem m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerInputMapActions(@GameInputSystem wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerInputMap/PlayerRotationCameraMouse".
            /// </summary>
            public InputAction @PlayerRotationCameraMouse => m_Wrapper.m_PlayerInputMap_PlayerRotationCameraMouse;
            /// <summary>
            /// Provides access to the underlying input action "PlayerInputMap/PlayerMovementKeyboard".
            /// </summary>
            public InputAction @PlayerMovementKeyboard => m_Wrapper.m_PlayerInputMap_PlayerMovementKeyboard;
            /// <summary>
            /// Provides access to the underlying input action "PlayerInputMap/PlayerJumpKeyboard".
            /// </summary>
            public InputAction @PlayerJumpKeyboard => m_Wrapper.m_PlayerInputMap_PlayerJumpKeyboard;
            /// <summary>
            /// Provides access to the underlying input action "PlayerInputMap/PlayerSprintingKeyboard".
            /// </summary>
            public InputAction @PlayerSprintingKeyboard => m_Wrapper.m_PlayerInputMap_PlayerSprintingKeyboard;
            /// <summary>
            /// Provides access to the underlying input action "PlayerInputMap/PlayerCrouchKeyboard".
            /// </summary>
            public InputAction @PlayerCrouchKeyboard => m_Wrapper.m_PlayerInputMap_PlayerCrouchKeyboard;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerInputMapActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerInputMapActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerInputMapActions" />
            public void AddCallbacks(IPlayerInputMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Add(instance);
                @PlayerRotationCameraMouse.started += instance.OnPlayerRotationCameraMouse;
                @PlayerRotationCameraMouse.performed += instance.OnPlayerRotationCameraMouse;
                @PlayerRotationCameraMouse.canceled += instance.OnPlayerRotationCameraMouse;
                @PlayerMovementKeyboard.started += instance.OnPlayerMovementKeyboard;
                @PlayerMovementKeyboard.performed += instance.OnPlayerMovementKeyboard;
                @PlayerMovementKeyboard.canceled += instance.OnPlayerMovementKeyboard;
                @PlayerJumpKeyboard.started += instance.OnPlayerJumpKeyboard;
                @PlayerJumpKeyboard.performed += instance.OnPlayerJumpKeyboard;
                @PlayerJumpKeyboard.canceled += instance.OnPlayerJumpKeyboard;
                @PlayerSprintingKeyboard.started += instance.OnPlayerSprintingKeyboard;
                @PlayerSprintingKeyboard.performed += instance.OnPlayerSprintingKeyboard;
                @PlayerSprintingKeyboard.canceled += instance.OnPlayerSprintingKeyboard;
                @PlayerCrouchKeyboard.started += instance.OnPlayerCrouchKeyboard;
                @PlayerCrouchKeyboard.performed += instance.OnPlayerCrouchKeyboard;
                @PlayerCrouchKeyboard.canceled += instance.OnPlayerCrouchKeyboard;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerInputMapActions" />
            private void UnregisterCallbacks(IPlayerInputMapActions instance)
            {
                @PlayerRotationCameraMouse.started -= instance.OnPlayerRotationCameraMouse;
                @PlayerRotationCameraMouse.performed -= instance.OnPlayerRotationCameraMouse;
                @PlayerRotationCameraMouse.canceled -= instance.OnPlayerRotationCameraMouse;
                @PlayerMovementKeyboard.started -= instance.OnPlayerMovementKeyboard;
                @PlayerMovementKeyboard.performed -= instance.OnPlayerMovementKeyboard;
                @PlayerMovementKeyboard.canceled -= instance.OnPlayerMovementKeyboard;
                @PlayerJumpKeyboard.started -= instance.OnPlayerJumpKeyboard;
                @PlayerJumpKeyboard.performed -= instance.OnPlayerJumpKeyboard;
                @PlayerJumpKeyboard.canceled -= instance.OnPlayerJumpKeyboard;
                @PlayerSprintingKeyboard.started -= instance.OnPlayerSprintingKeyboard;
                @PlayerSprintingKeyboard.performed -= instance.OnPlayerSprintingKeyboard;
                @PlayerSprintingKeyboard.canceled -= instance.OnPlayerSprintingKeyboard;
                @PlayerCrouchKeyboard.started -= instance.OnPlayerCrouchKeyboard;
                @PlayerCrouchKeyboard.performed -= instance.OnPlayerCrouchKeyboard;
                @PlayerCrouchKeyboard.canceled -= instance.OnPlayerCrouchKeyboard;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputMapActions.UnregisterCallbacks(IPlayerInputMapActions)" />.
            /// </summary>
            /// <seealso cref="PlayerInputMapActions.UnregisterCallbacks(IPlayerInputMapActions)" />
            public void RemoveCallbacks(IPlayerInputMapActions instance)
            {
                if (m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerInputMapActions.AddCallbacks(IPlayerInputMapActions)" />
            /// <seealso cref="PlayerInputMapActions.RemoveCallbacks(IPlayerInputMapActions)" />
            /// <seealso cref="PlayerInputMapActions.UnregisterCallbacks(IPlayerInputMapActions)" />
            public void SetCallbacks(IPlayerInputMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerInputMapActions" /> instance referencing this action map.
        /// </summary>
        public PlayerInputMapActions @PlayerInputMap => new PlayerInputMapActions(this);

        // PlayerInventoryMap
        private readonly InputActionMap m_PlayerInventoryMap;
        private List<IPlayerInventoryMapActions> m_PlayerInventoryMapActionsCallbackInterfaces = new List<IPlayerInventoryMapActions>();
        private readonly InputAction m_PlayerInventoryMap_PlayerOpenInventoryKeyboard;
        /// <summary>
        /// Provides access to input actions defined in input action map "PlayerInventoryMap".
        /// </summary>
        public struct PlayerInventoryMapActions
        {
            private @GameInputSystem m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerInventoryMapActions(@GameInputSystem wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "PlayerInventoryMap/PlayerOpenInventoryKeyboard".
            /// </summary>
            public InputAction @PlayerOpenInventoryKeyboard => m_Wrapper.m_PlayerInventoryMap_PlayerOpenInventoryKeyboard;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_PlayerInventoryMap; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerInventoryMapActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerInventoryMapActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerInventoryMapActions" />
            public void AddCallbacks(IPlayerInventoryMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerInventoryMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerInventoryMapActionsCallbackInterfaces.Add(instance);
                @PlayerOpenInventoryKeyboard.started += instance.OnPlayerOpenInventoryKeyboard;
                @PlayerOpenInventoryKeyboard.performed += instance.OnPlayerOpenInventoryKeyboard;
                @PlayerOpenInventoryKeyboard.canceled += instance.OnPlayerOpenInventoryKeyboard;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerInventoryMapActions" />
            private void UnregisterCallbacks(IPlayerInventoryMapActions instance)
            {
                @PlayerOpenInventoryKeyboard.started -= instance.OnPlayerOpenInventoryKeyboard;
                @PlayerOpenInventoryKeyboard.performed -= instance.OnPlayerOpenInventoryKeyboard;
                @PlayerOpenInventoryKeyboard.canceled -= instance.OnPlayerOpenInventoryKeyboard;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInventoryMapActions.UnregisterCallbacks(IPlayerInventoryMapActions)" />.
            /// </summary>
            /// <seealso cref="PlayerInventoryMapActions.UnregisterCallbacks(IPlayerInventoryMapActions)" />
            public void RemoveCallbacks(IPlayerInventoryMapActions instance)
            {
                if (m_Wrapper.m_PlayerInventoryMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerInventoryMapActions.AddCallbacks(IPlayerInventoryMapActions)" />
            /// <seealso cref="PlayerInventoryMapActions.RemoveCallbacks(IPlayerInventoryMapActions)" />
            /// <seealso cref="PlayerInventoryMapActions.UnregisterCallbacks(IPlayerInventoryMapActions)" />
            public void SetCallbacks(IPlayerInventoryMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerInventoryMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerInventoryMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerInventoryMapActions" /> instance referencing this action map.
        /// </summary>
        public PlayerInventoryMapActions @PlayerInventoryMap => new PlayerInventoryMapActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputMap" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerInputMapActions.AddCallbacks(IPlayerInputMapActions)" />
        /// <seealso cref="PlayerInputMapActions.RemoveCallbacks(IPlayerInputMapActions)" />
        public interface IPlayerInputMapActions
        {
            /// <summary>
            /// Method invoked when associated input action "PlayerRotationCameraMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerRotationCameraMouse(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PlayerMovementKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerMovementKeyboard(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PlayerJumpKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerJumpKeyboard(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PlayerSprintingKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerSprintingKeyboard(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PlayerCrouchKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerCrouchKeyboard(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInventoryMap" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerInventoryMapActions.AddCallbacks(IPlayerInventoryMapActions)" />
        /// <seealso cref="PlayerInventoryMapActions.RemoveCallbacks(IPlayerInventoryMapActions)" />
        public interface IPlayerInventoryMapActions
        {
            /// <summary>
            /// Method invoked when associated input action "PlayerOpenInventoryKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlayerOpenInventoryKeyboard(InputAction.CallbackContext context);
        }
    }
}
